require_relative '../swift_template_generator'

module Redbreast
    module TemplateGenerator
        module Color
            class Swift < TemplateGenerator::Swift
                include ERB::Util
                def template()
<<-TEMPLATE

import UIKit

//THIS FILE IS AUTOGENERATED, DO NOT EDIT BY HAND
extension UIColor {
<% def test(color_names, spacing, previous_level)
    text = ""
    arr = []

    color_names.each do |name|
        
        temp_arr = name.split("/")
        if temp_arr.length != 1
            arr.push(temp_arr.first)
        else
            if name == color_names.last
                text += spacing + 'static var ' + clean_variable_name(name) + ': UIColor { return UIColor(named: "' + previous_level + "/" + name + '")! }'
            else
                text += spacing + 'static var ' + clean_variable_name(name) + ': UIColor { return UIColor(named: "' + previous_level + "/" + name + '")! }' + "\n"
            end
        end
    end

    arr = arr.uniq

    arr.each do |struct_name|
        color_names_new = []

        text = text.empty? ? text : text + "\n" 
        text += spacing + 'struct ' + struct_name + ' {'
        color_names.each do |name|
            temp_arr = name.split("/")

            if temp_arr.length == 1
                continue
            elseif temp_arr.length != 2
                 temp_arr.drop(1).each do |temp|
                     color_names_new.push(temp)
                 end
                continue
            end

            if temp_arr[0] == struct_name
                temp_arr.drop(1).each do |temp|
                    color_names_new.push(temp)
                end
            end

        end
        if color_names_new.length != 0
            text += "\n" + test(color_names_new, spacing + "\t", previous_level + struct_name)
        end

        text += "\n" +  spacing  + '}' + "\n"
    end
    return text
end
%>
<%= test(color_names, "\t", "") %>    
}

TEMPLATE
                end
            end
        end
    end
end